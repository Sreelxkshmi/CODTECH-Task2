/*EDA: We performed basic data exploration using summary statistics, pair plots, and correlation heatmaps.
Data Splitting: We split the data into training and testing sets to evaluate the model's performance on unseen data.
Model Training: We trained a linear regression model using the training data.
Model Evaluation: We evaluated the model's performance using MSE and R-squared metrics.
Visualization: We visualized the regression line and actual vs. predicted values to understand the model's performance.*/


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

data = pd.DataFrame({
    'Age': [46, 33, 18, 25, 39, 22, 43, 28, 55, 31, 59, 53, 36, 22, 36, 38, 41, 41, 55, 45],
    'Salary': [73867, 49897, 96828, 42221, 71749, 115092, 36737, 33353, 68263, 80286, 47144, 67828, 96582, 62897, 31150, 75720, 66358, 34942, 82505, 86701]
})


print(data.head())


print(data.describe())


sns.pairplot(data)
plt.show()

plt.figure(figsize=(8, 6))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()


X = data[['Age']]
y = data['Salary']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)


model = LinearRegression()

model.fit(X_train, y_train)


print("Intercept:", model.intercept_)
print("Coefficient:", model.coef_)

y_pred = model.predict(X_test)


print("Predicted values:", y_pred)
print("Actual values:", y_test.values)


mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)


r2 = r2_score(y_test, y_pred)
print("R-squared:", r2)


plt.figure(figsize=(8, 6))
plt.scatter(X, y, color='blue', label='Actual Data')
plt.plot(X, model.predict(X), color='red', linewidth=2, label='Regression Line')
plt.xlabel('Age')
plt.ylabel('Salary')
plt.title('Linear Regression: Age vs Salary')
plt.legend()
plt.show()


plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='green')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=2)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted Salary')
plt.show()
